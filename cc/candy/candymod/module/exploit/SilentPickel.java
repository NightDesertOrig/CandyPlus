//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package cc.candy.candymod.module.exploit;

import cc.candy.candymod.module.*;
import cc.candy.candymod.setting.*;
import net.minecraft.util.*;
import net.minecraft.init.*;
import cc.candy.candymod.utils.*;
import cc.candy.candymod.*;
import cc.candy.candymod.module.combat.*;
import net.minecraft.network.play.client.*;
import net.minecraft.network.*;

public class SilentPickel extends Module
{
    public Setting<Float> delay;
    public Setting<Boolean> noGap;
    public Setting<Boolean> noPA;
    public Timer timer;
    public int oldslot;
    public EnumHand oldhand;
    
    public SilentPickel() {
        super("SilentPickel", Categories.EXPLOIT, false, false);
        this.delay = (Setting<Float>)this.register(new Setting("Delay", (T)3.0f, (T)25.0f, (T)0.0f));
        this.noGap = (Setting<Boolean>)this.register(new Setting("NoGapSwitch", (T)true));
        this.noPA = (Setting<Boolean>)this.register(new Setting("NoPASwitch", (T)true));
        this.oldslot = -1;
        this.oldhand = null;
    }
    
    @Override
    public void onEnable() {
        this.timer = new Timer();
    }
    
    @Override
    public void onUpdate() {
        if (this.nullCheck()) {
            return;
        }
        final int pickel = InventoryUtil.getItemHotbar(Items.DIAMOND_PICKAXE);
        if (pickel == -1) {
            return;
        }
        if (SilentPickel.mc.player.inventory.getCurrentItem().getItem() == Items.GOLDEN_APPLE && this.noGap.getValue()) {
            return;
        }
        final Module pa = CandyMod.m_module.getModuleWithClass((Class)PistonAura.class);
        if (pa.isEnable && this.noPA.getValue()) {
            return;
        }
        final Module cev = CandyMod.m_module.getModuleWithClass((Class)CevBreaker.class);
        final Module civ = CandyMod.m_module.getModuleWithClass((Class)CivBreaker.class);
        if (cev.isEnable || civ.isEnable) {
            return;
        }
        if (InstantMine.FourZeroFourBlock != null) {
            if (SilentPickel.mc.player.inventory.getCurrentItem().getItem() != Items.DIAMOND_PICKAXE) {
                this.setItem(pickel);
            }
            final InstantMine mine = (InstantMine)CandyMod.m_module.getModuleWithClass((Class)InstantMine.class);
            mine.update();
            this.restoreItem();
        }
    }
    
    public void setItem(final int slot) {
        this.oldhand = null;
        if (SilentPickel.mc.player.isHandActive()) {
            this.oldhand = SilentPickel.mc.player.getActiveHand();
        }
        this.oldslot = SilentPickel.mc.player.inventory.currentItem;
        SilentPickel.mc.player.connection.sendPacket((Packet)new CPacketHeldItemChange(slot));
    }
    
    public void restoreItem() {
        if (this.oldslot != -1) {
            if (this.oldhand != null) {
                SilentPickel.mc.player.setActiveHand(this.oldhand);
            }
            SilentPickel.mc.player.connection.sendPacket((Packet)new CPacketHeldItemChange(this.oldslot));
            this.oldslot = -1;
            this.oldhand = null;
        }
    }
}
