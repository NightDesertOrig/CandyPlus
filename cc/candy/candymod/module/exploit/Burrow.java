//Deobfuscated with https://github.com/SimplyProgrammer/Minecraft-Deobfuscator3000 using mappings "C:\Users\user\Desktop\1.12 stable mappings"!

//Decompiled by Procyon!

package cc.candy.candymod.module.exploit;

import cc.candy.candymod.module.*;
import cc.candy.candymod.setting.*;
import net.minecraft.init.*;
import net.minecraft.network.*;
import net.minecraft.entity.*;
import net.minecraft.util.*;
import cc.candy.candymod.utils.*;
import net.minecraft.entity.item.*;
import net.minecraft.util.math.*;
import java.util.*;
import net.minecraft.network.play.client.*;

public class Burrow extends Module
{
    private final Setting<Float> offset;
    private final Setting<Boolean> sneak;
    private final Setting<Boolean> echest;
    private final Setting<Boolean> sushiBypass;
    private BlockPos originalPos;
    private int oldSlot;
    
    public Burrow() {
        super("Burrow", Categories.EXPLOIT, false, false);
        this.offset = (Setting<Float>)this.register(new Setting("Offset", (T)7.0f, (T)30.0f, (T)(-20.0f)));
        this.sneak = (Setting<Boolean>)this.register(new Setting("Sneak", (T)false));
        this.echest = (Setting<Boolean>)this.register(new Setting("EChest", (T)false));
        this.sushiBypass = (Setting<Boolean>)this.register(new Setting("Bypass", (T)false));
        this.oldSlot = -1;
    }
    
    @Override
    public void onEnable() {
        super.onEnable();
        this.originalPos = new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ);
        if (Burrow.mc.world.getBlockState(new BlockPos(Burrow.mc.player.posX, Burrow.mc.player.posY, Burrow.mc.player.posZ)).getBlock().equals(Blocks.OBSIDIAN) || this.intersectsWithEntity(this.originalPos)) {
            this.toggle();
            return;
        }
        this.oldSlot = Burrow.mc.player.inventory.currentItem;
    }
    
    @Override
    public void onTick() {
        if ((InventoryUtil.findHotbarBlock(Blocks.OBSIDIAN) == -1 && !this.echest.getValue()) || (InventoryUtil.findHotbarBlock(Blocks.ENDER_CHEST) == -1 && this.echest.getValue())) {
            this.sendMessage("Can't find material in hotbar!");
            this.toggle();
            return;
        }
        switchToSlot(InventoryUtil.findHotbarBlock(((boolean)this.echest.getValue()) ? Blocks.ENDER_CHEST : Blocks.OBSIDIAN));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.41999998688698, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 0.7531999805211997, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.00133597911214, Burrow.mc.player.posZ, true));
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + 1.16610926093821, Burrow.mc.player.posZ, true));
        final boolean sneaking = Burrow.mc.player.isSneaking();
        if (this.sneak.getValue() && sneaking) {
            Burrow.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)Burrow.mc.player, CPacketEntityAction.Action.START_SNEAKING));
        }
        BlockUtil.placeBlock(this.originalPos, EnumHand.MAIN_HAND, false, true, sneaking);
        if (this.sushiBypass.getValue()) {
            Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY - 1.11, Burrow.mc.player.posZ, false));
        }
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketPlayer.Position(Burrow.mc.player.posX, Burrow.mc.player.posY + this.offset.getValue(), Burrow.mc.player.posZ, false));
        switchToSlot(this.oldSlot);
        if (this.sneak.getValue() && sneaking) {
            Burrow.mc.player.connection.sendPacket((Packet)new CPacketEntityAction((Entity)Burrow.mc.player, CPacketEntityAction.Action.STOP_SNEAKING));
        }
        this.toggle();
    }
    
    private boolean intersectsWithEntity(final BlockPos pos) {
        for (final Entity entity : Burrow.mc.world.loadedEntityList) {
            if (entity.equals((Object)Burrow.mc.player)) {
                continue;
            }
            if (entity instanceof EntityItem) {
                continue;
            }
            if (new AxisAlignedBB(pos).intersects(entity.getEntityBoundingBox())) {
                return true;
            }
        }
        return false;
    }
    
    public static void switchToSlot(final int slot) {
        Burrow.mc.player.connection.sendPacket((Packet)new CPacketHeldItemChange(slot));
        Burrow.mc.player.inventory.currentItem = slot;
        Burrow.mc.playerController.updateController();
    }
}
